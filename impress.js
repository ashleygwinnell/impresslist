angular.module("App",["ui.router","App.Api","App.Filters","App.Shell","App.Model","App.Person","App.Publication","App.Priority","App.User","App.Views"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,o){e.state("home",{url:"home/",templateUrl:"app/views/index/index.template.html"}),e.state("login",{url:"login/",templateUrl:"app/views/login/login.template.html"}),e.state("home.people",{url:"people/"}),e.state("home.publications",{url:"publications/"}),e.state("home.youtubers",{url:"youtubers/"}),e.state("home.chat",{url:"chat/"}),e.state("home.jobs",{url:"jobs/"}),e.state("home.people.person",{url:":id/",onEnter:["$state","$stateParams","App","PersonModal",function(e,t,o,r){var n=o.people[t.id];console.log(n),r.open(n)}],resolve:{}}),e.state("admin",{url:"admin/"})}]).run(["$rootScope","$log","$state","$timeout","App",function(e,t,o,r,n){e.$log=t,e.App=n,r(function(){e.App.start()})}]).filter("priority",function(){return function(e){return 0==e?"N/A":1==e?"Low":2==e?"Medium":"3"==e?"High":"-"}}).filter("relativetime",function(){return function(e){return impresslist.util.relativetime_contact(e)}}),angular.module("App").controller("AppController",["$scope","$compile","App",function(e,t,o){e.App=o}]),angular.module("App").service("App",["$rootScope","$state","$location","$stateParams","$timeout","Api","User","Person","Publication","PersonModal",function(e,t,o,r,n,i,l,a,s,p){var u=this;this.user=null,this.people=[],this.publications=[],this.users=[],this.config={system:{email:"email"},user:{gmail:"gmail"}},this.name="impress[]",this.description="A service to help you impress people.",this.start=function(){i.request("/auth/check/").then(function(e){e.success?(t.go("home"),u.user=l.populate(e.user)[0],u.load()):t.go("login")})},this.load=function(){i.request("/person/list/").then(function(e){u.people=a.populateKeyed(e.people,"id")}),i.request("/publication/list/").then(function(e){u.publications=s.populateKeyed(e.publications,"id")}),i.request("/user/list/").then(function(e){u.users=l.populateKeyed(e.users,"id")})},this.parts=[""],this.part=function(e){return u.parts[e]||!1},this.updateParts=function(e){u.parts=e.split(".")},e.$on("$stateChangeStart",function(e,t,o,r,n,i){u.updateParts(t.name)})}]),angular.module("App.Api",[]),angular.module("App.Api").factory("ApiResponseTransformer",function(){return function(e){return JSON.parse(e)}}),angular.module("App.Api").service("Api",["$http","$q","ApiResponseTransformer",function(e,t,o){this.request=function(r,n){console.log("Api.request - "+r),n&&console.log(n);var i=t.defer();return e({method:"POST",url:"backend/api.php?endpoint="+r,transformResponse:o,data:n}).success(function(e){i.resolve(e)}),i.promise}}]),angular.module("App.Filters",[]),angular.module("App.Filters").service("Filters",["$rootScope","$state",function(e,t){this.searchText="",this.recentContact=!1,this.highPriority=!1,this.personalContact=!1,this.emailAttached=!1,this.assignedSelf=!1,this.outOfDate=!1}]),angular.module("App.Filters").directive("impressFilters",function(){return{restrict:"E",templateUrl:"app/components/filters/filters.template.html"}}),angular.module("App.Filters").controller("FiltersController",["$scope","$http","$location","App","Filters",function(e,t,o,r,n){e.Filters=n}]),angular.module("App.Model",[]),angular.module("App.Model").factory("Model",["$rootScope","$state",function(e,t){var o={};return o.create=function(t){return t.prototype.initPriorities=function(t){var o=this.field(t);if("undefined"==typeof o||0==o.length)return void(this["priority_"+e.App.user.game]=0);for(var r=o.split(","),n=0;n<r.length;++n){var i=r[n].split("="),l=i[0],a=i[1];this["priority_"+l]=a}},t.prototype.priority=function(){var t=this["priority_"+e.App.user.game];return"undefined"==typeof t?0:t},t.prototype.onAdded=function(){},t.prototype.onRemoved=function(){},t.prototype.field=function(e){var t=this[e];return null==t?(console.error("field "+e+" was null."),console.error(this.fields),""):t},t.populateKeyed=function(e,o){var r={};if(e&&angular.isArray(e)&&e.length)for(var n=0;n<e.length;++n)r[e[n][o]]=new t(e[n]);else e&&angular.isObject(e)&&(r[e[o]]=new t(e));return r},t.populate=function(e){var o=[];if(e&&angular.isArray(e)&&e.length)for(var r=0;r<e.length;++r)o.push(new t(e[r]));else e&&angular.isObject(e)&&o.push(new t(e));return o},t},o}]),angular.module("App.Person",[]),angular.module("App.Person").directive("impressPersonRow",["PersonModal",function(e){return{restrict:"A",templateUrl:"app/components/person/row.template.html",link:function(e,t,o){}}}]),angular.module("App.Person").factory("Person",["$rootScope","$state","$compile","Model","Filters","PersonModal",function(e,t,o,r,n,i){function l(e){angular.extend(this,r),e&&angular.extend(this,e),this.twitter_followers_formatted=new Number(e.twitter_followers).toLocaleString(),this.modal=i}return l.prototype.testFunction=function(){},l.prototype.fullname=function(){return this.firstname+" "+this.surnames},l.prototype.search=function(e){var t=!0;return 0==e.length?t:(t=-1!=this.fullname().toLowerCase().indexOf(e))?t:(t=-1!=this.notes.toLowerCase().indexOf(e))?t:(t=-1!=this.email.toLowerCase().indexOf(e),t?t:!1)},l.prototype.visible=function(){return n.searchText.length>0&&!this.search(n.searchText)?!1:n.recentContact&&Number(this.lastcontacted)<Date.now()/1e3-604800?!1:n.highPriority&&this.priority()<3?!1:n.emailAttached&&0==this.email.length?!1:n.assignedSelf&&this.assigned!=e.App.user.id?!1:n.outOfDate&&0==this.outofdate?!1:!n.personalContact||null!=this.lastcontactedby_me},r.create(l)}]).filter("personArrayFilter",function(){return function(e){var t={};return angular.forEach(e,function(e){e.visible()&&(t[e.id]=e)}),t}}),angular.module("App.Person").service("PersonModal",["$rootScope",function(e){var t={person:null,open:function(o){t.person=o,e.$broadcast("PersonModal.open",o),$(".person_modal").modal({show:!0})},close:function(){$(".person_modal").modal("hide")},emailClientLink:function(e){return impresslist.util.mailtoClient(defaultEmail,emailSubject,emailBody,emailBCC)},emailGmailLink:function(e){return impresslist.util.mailtoGmail(defaultEmail,emailSubject,emailBody,emailBCC,emailGmailIndex)}};return t}]).filter("emailArrayFilter",function(){return function(e){var t=[];return angular.forEach(e,function(e){e.email.length>0&&t.push(e)}),t}}),angular.module("App.Person").controller("PersonModalController",["$scope","PersonModal",function(e,t){e.$on("PersonModal.open",function(o){e.person=t.person}),e.person=t.person}]),angular.module("App.Priority",[]),angular.module("App.Priority").directive("impressPriorityName",function(){return{restrict:"A",scope:{priority:"@"},controller:["$scope","$element",function(e,t){e.name=t.attr("priority")}],template:"<td>{{ $scope.name }}</td>"}}),angular.module("App.Publication",[]),angular.module("App.Publication").factory("Publication",["$rootScope","$state","Model","Filters",function(e,t,o,r){function n(e){angular.extend(this,o),e&&angular.extend(this,e),this.twitter_followers_formatted=new Number(e.twitter_followers).toLocaleString()}return n.prototype.open=function(){console.log("open")},n.prototype.search=function(e){var t=!0;return 0==e.length?t:(t=-1!=this.name.toLowerCase().indexOf(e))?t:(t=-1!=this.notes.toLowerCase().indexOf(e),t?t:!1)},n.prototype.visible=function(){return r.searchText.length>0&&!this.search(r.searchText)?!1:r.recentContact&&Number(this.lastcontacted)<Date.now()/1e3-604800?!1:r.highPriority&&this.priority()<3?!1:r.emailAttached&&0==this.email.length?!1:r.assignedSelf&&this.assigned!=e.App.user.id?!1:r.outOfDate&&0==this.outofdate?!1:!r.personalContact||null!=this.lastcontactedby_me},o.create(n)}]).filter("publicationArrayFilter",function(){return function(e){var t=[];return angular.forEach(e,function(e){e.visible()&&t.push(e)}),t}}),angular.module("App.Shell",[]),angular.module("App.Shell").directive("impressFooter",function(){return{restrict:"E",templateUrl:"app/components/shell/footer/footer.template.html"}}),angular.module("App.Shell").directive("impressNav",function(){return{restrict:"E",templateUrl:"app/components/shell/nav/nav.template.html"}}),angular.module("App.Shell").controller("NavController",["$scope","$http","$location","App","Filters",function(e,t,o,r,n){e.Filters=n}]),angular.module("App.User",[]),angular.module("App.User").factory("User",["$rootScope","$state","Model",function(e,t,o){function r(e){e&&angular.extend(this,e)}return r.prototype.testFunction=function(){},r.prototype.fullname=function(){return this.forename+" "+this.surname},o.create(r)}]),angular.module("App.Views",[]),angular.module("App.Views").controller("LoginController",["$scope","$state","App","Api","User",function(e,t,o,r,n){e.App=o,e.Api=r,e.errors=[],e.login=function(e,i){r.request("/auth/login/",{email:e,password:i}).then(function(e){o.user=n.populate(e.data.user)[0],o.load(),console.log(o.user),t.go("home")})}}]);
//# sourceMappingURL=data:application/json;base64,
